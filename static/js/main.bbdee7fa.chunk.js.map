{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["doc","GoogleSpreadsheet","require","App","useState","name","setName","count","setCount","handleSubmit","event","preventDefault","console","log","newRow","ID","sheet","sheetsById","title","rowCount","addRow","config","type","useServiceAccountAuth","loadInfo","loadCells","i","cell","getCell","value","sheet_key","id","cellStats","useEffect","setTimeout","initializeWorker","className","src","logo","alt","href","target","rel","onClick","alert","onSubmit","onChange","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4pBAAe,MAA0B,iC,iBCanCA,EAAM,IAAIC,EAFcC,EAAQ,KAA9BD,mBAJc,gDA+FPE,MArFf,WACC,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,GAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACMC,EAAY,iDAAG,WAAOC,GAAP,0FACpBA,EAAMC,iBACNC,QAAQC,IAAR,oCAAyCR,EAAzC,eAAoDC,IACxCQ,EAAS,CAAEC,GAAIV,GACfW,EAAQhB,EAAIiB,WAAW,YAC7BL,QAAQC,IAAI,aAAeG,EAAME,MAAQ,IAAMF,EAAMG,UALvC,SAMRH,EAAMI,OAAON,GANL,OAOdR,EAAQ,IAPM,2CAAH,sDAHJ,sDAcX,yGACIM,QAAQC,IAAI,kBAAoBQ,EAAOC,MACvCV,QAAQC,IAAIQ,GAFhB,SAGUrB,EAAIuB,sBAAsBF,GAHpC,cAIIT,QAAQC,IAAI,qBAJhB,SAKUb,EAAIwB,WALd,cAMIZ,QAAQC,IAAI,qBACNG,EAAQhB,EAAIiB,WAAW,YAPjC,UAQUD,EAAMS,UAAU,SAR1B,QASI,IAASC,EAAI,EAAIA,EAAI,GAAKA,IAEhBC,EAAOX,EAAMY,QAAQ,EAAEF,GAC7Bd,QAAQC,IAAIc,EAAKE,OAErBjB,QAAQC,IAAIiB,EAAUC,IACtBnB,QAAQC,IAAIiB,EAAUzB,MACtBO,QAAQC,IAAIG,EAAMgB,WAhBtB,6CAdW,sBAoDd,OAnBAC,qBAAU,WACTC,YAAW,WACDtB,QAAQC,IAAI,cACrBL,GAAS,SAACD,GAAD,OAAWA,EAAQ,CAAnB,GACT,GAAE,IACH,GAAE,IAEA0B,qBAAU,YAxCC,mCAyCPE,EACH,GAAG,IAEJF,qBAAU,WACNrB,QAAQC,IAAI,gBAAkBR,EACjC,GAAG,CAACA,IAOP,qBAAK+B,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,sCACM,8CADN,uBACkDhC,EADlD,OAGA,mBACC6B,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJL,yBAQA,wBAAQC,QApBS,WACnB/B,QAAQC,IAAI,WACZ+B,MAAM,UACN,EAiBE,mBAGA,uBAAMC,SAAUpC,EAAhB,UACC,qDACC,uBACCa,KAAK,OACLO,MAAOxB,EACPyC,SAAU,SAACC,GAAD,OAAOzC,EAAQyC,EAAEN,OAAOZ,MAAxB,OAGZ,uBAAOP,KAAK,kBAKhB,ECxFc0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,ECJDQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.bbdee7fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react';\nimport config from \"./api/config\";\nimport sheet_key from \"./api/sheet\";\nimport logo from './logo.svg';\nimport './App.css';\n//import 'semantic-ui-css/semantic.min.css';\n\nconst spreadsheetID = '12AWolV6lI99LM6NNP1bUwYanAuNDSWRJI8X4-ozM98Q';\n\n\n//import { GoogleSpreadsheet } from 'google-spreadsheet';\nconst { GoogleSpreadsheet } = require(\"google-spreadsheet\");\n\nconst doc = new GoogleSpreadsheet(spreadsheetID);\n//const doc = new GoogleSpreadsheet('1JXha33UfFDKxfp8t909DC1BjurckxPB1xMN__f3FzZk');\n//const creds = require('./config/myproject-361608-63d17026f60b.json');\n\nfunction App() {\n\tconst [name, setName] = useState(\"\");\n\tconst [count, setCount] = useState(0);\n\tconst handleSubmit = async (event) => {\n\t\tevent.preventDefault();\n\t\tconsole.log(`The name you entered was: ${name} :: ${setName}`);\n        const newRow = { ID: name };\n        const sheet = doc.sheetsById[1318890137];\n        console.log(\"Append to \" + sheet.title + \" \" + sheet.rowCount);\n        await sheet.addRow(newRow);\n        setName('');\n\t}\n\n\n    async function initializeWorker() {\n        console.log('initilizeWorker' + config.type);\n        console.log(config);\n        await doc.useServiceAccountAuth(config);\n        console.log('Succeeded to Auth');\n        await doc.loadInfo(); // loads document properties and worksheets\n        console.log('Succeeded to load');\n        const sheet = doc.sheetsById[1318890137];\n        await sheet.loadCells('A1:J1');\n        for (let i = 0 ; i < 10 ; i++)\n        {\n            const cell = sheet.getCell(0,i);\n            console.log(cell.value);\n        }\n        console.log(sheet_key.id);\n        console.log(sheet_key.name);\n        console.log(sheet.cellStats);\n    }\n\n\tuseEffect(() => {\n\t\tsetTimeout(() => {\n            console.log('SetTimeout');\n\t\t\tsetCount((count) => count + 1);\n\t\t}, 1000);\n\t}, []);\n\n    useEffect(function () {\n        initializeWorker();\n    },  []);\n\n    useEffect(function () {\n        console.log('name changed ' + name);\n    },  [name]);\n\tconst clickButton = () => {\n\t\tconsole.log(\"Clicked\");\n\t\talert(\"Clicked\");\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>\n\t\t\t\t\tEdit <code>src/App.js</code> and save to reload {count}.\n\t\t\t\t</p>\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"App-link\"\n\t\t\t\t\thref=\"https://reactjs.org\"\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t>\n\t\t\t\t\tLearn React\n\t\t\t\t</a>\n\t\t\t\t<button onClick={clickButton}>\n\t\t\t\t\tClick\n\t\t\t\t</button>\n\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t<label>Enter your name:\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</label>\n\t\t\t\t\t<input type=\"submit\" />\n\t\t\t\t</form>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}